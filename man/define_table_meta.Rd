% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/define_meta_data.R
\name{define_table_meta}
\alias{define_table_meta}
\title{Define Metadata for a Data Table}
\usage{
define_table_meta(
  table_name,
  source_identifier,
  description = NULL,
  identifier_columns,
  key_outcome_specs
)
}
\arguments{
\item{table_name}{Character string, the conceptual name of the table.}

\item{source_identifier}{Character string, the file name or DB table identifier.}

\item{description}{Character string, a brief description of the table (optional).}

\item{identifier_columns}{Character vector, names of column(s) acting as primary key(s).}

\item{key_outcome_specs}{A list of 'OutcomeSpec' lists. Each OutcomeSpec should be a list
with elements:
\itemize{
\item \code{OutcomeName} (character): Conceptual name of the outcome.
\item \code{ValueExpression} (language or character): R expression (use \code{quote()}) or string
for the per-row value calculation.
\item \code{AggregationMethods} (list of 'AggregationSpec' lists):
Each AggregationSpec should be a list with elements:
\itemize{
\item \code{AggregatedName} (character): Descriptive name for the aggregated result.
\item \code{AggregationFunction} (character): R aggregation function (e.g., "sum").
\item \code{GroupingVariables} (character vector): Columns to group by. Use
\code{character(0)} or \code{NULL} for no grouping.
}
}}
}
\value{
A list object representing the metadata for the table.
}
\description{
Creates a structured list containing metadata for a single data table,
including how its key outcomes can be aggregated.
}
\examples{
transactions_metadata <- define_table_meta(
  table_name = "transactions",
  source_identifier = "transactions.csv",
  description = "Table of individual sales transactions.",
  identifier_columns = "transaction_id",
  key_outcome_specs = list(
    list( # Outcome: Revenue
      OutcomeName = "Revenue",
      ValueExpression = quote(price * quantity),
      AggregationMethods = list(
        list(AggregatedName = "TotalRevenueByCustomer",
             AggregationFunction = "sum",
             GroupingVariables = "customer_id"),
        list(AggregatedName = "TotalRevenueByProduct",
             AggregationFunction = "sum",
             GroupingVariables = "product_id"),
        list(AggregatedName = "OverallTotalRevenue",
             AggregationFunction = "sum",
             GroupingVariables = character(0))
      )
    ),
    list( # Outcome: Transaction Count
      OutcomeName = "TransactionCount",
      ValueExpression = 1, # Each row is one transaction
      AggregationMethods = list(
        list(AggregatedName = "CountTransactionsByCustomer",
             AggregationFunction = "sum", # sum of 1s is a count
             GroupingVariables = "customer_id"),
        list(AggregatedName = "CountTransactionsByProduct",
             AggregationFunction = "sum",
             GroupingVariables = "product_id")
      )
    )
  )
)
print(transactions_metadata)
}
